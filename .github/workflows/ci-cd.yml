name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

permissions:
  contents: read
  actions: write
  issues: write
  pull-requests: write
  packages: write

# Global environment variables for optimization
env:
  NODE_VERSION: '20.x'
  NPM_CONFIG_FUND: false
  NPM_CONFIG_AUDIT: false
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Parallel job for faster execution
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      server: ${{ steps.changes.outputs.server }}
      client: ${{ steps.changes.outputs.client }}
      docker: ${{ steps.changes.outputs.docker }}
    steps:
    - name: Checkout code 
      uses: actions/checkout@v4
      with:
        fetch-depth: 2
    
    - name: Check for changes
      id: changes
      run: |
        # Check if server files changed
        if git diff --name-only HEAD~1 HEAD | grep -E "(server\.js|api/|package\.json|package-lock\.json)" || [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/main" ]]; then
          echo "server=true" >> $GITHUB_OUTPUT
        else
          echo "server=false" >> $GITHUB_OUTPUT
        fi
        
        # Check if client files changed
        if git diff --name-only HEAD~1 HEAD | grep -E "client/" || [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/main" ]]; then
          echo "client=true" >> $GITHUB_OUTPUT
        else
          echo "client=false" >> $GITHUB_OUTPUT
        fi
        
        # Check if Docker files changed
        if git diff --name-only HEAD~1 HEAD | grep -E "(Dockerfile|\.dockerignore|docker-compose)" || [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/main" ]]; then
          echo "docker=true" >> $GITHUB_OUTPUT
        else
          echo "docker=false" >> $GITHUB_OUTPUT
        fi

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.server == 'true' || github.event_name == 'pull_request'
    
    # Use matrix only for important branches
    strategy:
      matrix:
        node-version: ${{ github.ref == 'refs/heads/main' && fromJSON('["18.x", "20.x"]') || fromJSON('["20.x"]') }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: 'package-lock.json'
    
    # Install dependencies with optimizations
    - name: Install dependencies
      run: |
        npm ci --prefer-offline --no-audit --no-fund
    
    - name: Run tests
      run: npm run test:ci
      env:
        NODE_ENV: test
    
    - name: Upload coverage
      if: matrix.node-version == '20.x' && github.event_name == 'push'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.server == 'true' || github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: 'package-lock.json'
    
    - name: Install dependencies
      run: npm ci --prefer-offline --no-audit --no-fund
    
    - name: Run linting
      run: npm run lint --if-present

  # Security job runs in parallel but only on pushes to main branches
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.server == 'true' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: 'package-lock.json'
    
    - name: Install dependencies
      run: npm ci --prefer-offline --no-audit --no-fund
    
    - name: Run security audit
      run: npm audit --audit-level=moderate
      continue-on-error: true

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [changes, test, lint]
    if: needs.changes.outputs.client == 'true' || needs.changes.outputs.server == 'true' || needs.changes.outputs.docker == 'true'
    
    outputs:
      image-name: ${{ steps.image.outputs.image-name }}
      image-tag: ${{ steps.image.outputs.image-tag }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver-opts: |
          network=host
    
    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
        labels: |
          org.opencontainers.image.title=VicSam Group API
          org.opencontainers.image.description=Secure Node.js API with authentication
          org.opencontainers.image.vendor=VicSam Group
    
    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        # Build for single platform on PR, multi-platform on push
        platforms: ${{ github.event_name == 'pull_request' && 'linux/amd64' || 'linux/amd64,linux/arm64' }}
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILDKIT_INLINE_CACHE=1
    
    - name: Set outputs
      id: image
      run: |
        echo "image-name=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}" >> $GITHUB_OUTPUT
        echo "image-tag=${{ fromJSON(steps.meta.outputs.json).tags[0] }}" >> $GITHUB_OUTPUT

  # Simplified deployment jobs
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging
    
    steps:
    - name: Deploy to staging
      run: |
        echo "ðŸš€ Deploying to staging environment..."
        echo "Docker image: ${{ needs.build.outputs.image-name }}:${{ needs.build.outputs.image-tag }}"
        # Add actual deployment commands here
    
    - name: Smoke test
      run: |
        echo "âœ… Running smoke tests on staging..."
        # Add smoke tests here

  deploy-production:
    name: Deploy to Production  
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: Deploy to production
      run: |
        echo "ðŸš€ Deploying to production environment..."
        echo "Docker image: ${{ needs.build.outputs.image-name }}:${{ needs.build.outputs.image-tag }}"
        # Add actual deployment commands here
    
    - name: Smoke test
      run: |
        echo "âœ… Running smoke tests on production..."
        # Add smoke tests here
    
    - name: Notify success
      if: success()
      run: echo "âœ… Production deployment successful!"

  # Cleanup only on schedule or manual trigger to avoid slowing down regular builds
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Cleanup old images
      uses: actions/delete-package-versions@v5
      with:
        package-name: ${{ github.event.repository.name }}
        package-type: 'container'
        min-versions-to-keep: 5
        delete-only-untagged-versions: true
      continue-on-error: true
