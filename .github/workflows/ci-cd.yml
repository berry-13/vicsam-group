name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

permissions:
  contents: read
  actions: write
  issues: write
  pull-requests: write

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linting
      run: npm run lint --if-present
    
    - name: Run tests
      run: npm run test:ci
      env:
        NODE_ENV: test
    
    - name: Upload coverage to Codecov
      if: matrix.node-version == '20.x'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run security audit
      run: npm audit --audit-level=moderate
    
    - name: Run dependency check
      run: npx audit-ci --moderate

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [test, security]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build application
      run: npm run build --if-present
    
    - name: Create deployment package
      run: |
        mkdir -p deployment
        cp -r api deployment/
        cp server.js package.json deployment/
        cp .env.example deployment/.env
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: deployment-package
        path: deployment/
        retention-days: 30

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: deployment-package
        path: deployment/
    
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Aggiungi qui i comandi per il deployment su staging
        # Ad esempio: scp, rsync, docker, etc.
    
    - name: Run smoke tests
      run: |
        echo "Running smoke tests on staging..."
        # Aggiungi qui i test di smoke per verificare il deployment

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: deployment-package
        path: deployment/
    
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Aggiungi qui i comandi per il deployment su produzione
    
    - name: Run smoke tests
      run: |
        echo "Running smoke tests on production..."
        # Aggiungi qui i test di smoke per verificare il deployment
    
    - name: Notify deployment
      if: success()
      run: |
        echo "âœ… Deployment to production successful!"
        # Aggiungi qui notifiche (Slack, email, etc.)

  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: Cleanup old artifacts
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          try {
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId,
            });
            
            // Mantieni solo gli ultimi 5 artifacts
            const oldArtifacts = artifacts.data.artifacts.slice(5);
            
            for (const artifact of oldArtifacts) {
              try {
                await github.rest.actions.deleteArtifact({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  artifact_id: artifact.id,
                });
                console.log(`Deleted artifact: ${artifact.name}`);
              } catch (error) {
                console.log(`Failed to delete artifact ${artifact.name}: ${error.message}`);
              }
            }
          } catch (error) {
            console.log(`Cleanup failed: ${error.message}`);
          }
