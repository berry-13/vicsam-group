name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

permissions:
  contents: write
  issues: write
  pull-requests: write
  packages: write

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run tests
      run: npm run test:ci
      env:
        NODE_ENV: test
    
    - name: Determine version
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          # Versioning manuale
          NEW_VERSION=$(npm version ${{ github.event.inputs.version }} --no-git-tag-version)
          echo "version=${NEW_VERSION}" >> $GITHUB_OUTPUT
          echo "tag=${NEW_VERSION}" >> $GITHUB_OUTPUT
        else
          # Versioning da tag
          TAG=${GITHUB_REF#refs/tags/}
          echo "version=${TAG}" >> $GITHUB_OUTPUT
          echo "tag=${TAG}" >> $GITHUB_OUTPUT
        fi
    
    - name: Generate changelog
      id: changelog
      run: |
        # Genera changelog dai commit
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
        
        if [ -n "$PREVIOUS_TAG" ]; then
          CHANGELOG=$(git log --pretty=format:"- %s (%h)" ${PREVIOUS_TAG}..HEAD | head -20)
        else
          CHANGELOG=$(git log --pretty=format:"- %s (%h)" | head -20)
        fi
        
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
    
    - name: Create release package
      run: |
        mkdir -p release
        
        # Copia i file necessari per la release
        cp -r api release/
        cp server.js package.json README.md LICENSE release/
        cp -r __tests__ release/
        
        # Crea file di esempio per configurazione
        cp .env.test release/.env.example
        
        # Crea archivio
        tar -czf vicsam-group-${{ steps.version.outputs.version }}.tar.gz -C release .
    
    - name: Create GitHub Release
      id: create_release
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.tag }}
        name: Release ${{ steps.version.outputs.version }}
        body: |
          ## üöÄ VicSam Group API ${{ steps.version.outputs.version }}
          
          ### Changes
          ${{ steps.changelog.outputs.changelog }}
          
          ### Installation
          ```bash
          wget https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.tag }}/vicsam-group-${{ steps.version.outputs.version }}.tar.gz
          tar -xzf vicsam-group-${{ steps.version.outputs.version }}.tar.gz
          npm install
          cp .env.example .env
          # Configura le variabili d'ambiente
          npm start
          ```
          
          ### Features
          - ‚úÖ Secure Bearer Token Authentication
          - ‚úÖ Comprehensive Data Validation
          - ‚úÖ Rate Limiting & Security Headers
          - ‚úÖ Structured JSON Responses
          - ‚úÖ Health Check Endpoint
          - ‚úÖ Complete Test Suite
          
          ### Documentation
          - üìñ [API Documentation](./API_DOCUMENTATION.md)
          - üèÉ‚Äç‚ôÇÔ∏è [Quick Start Guide](./README.md)
        files: ./vicsam-group-${{ steps.version.outputs.version }}.tar.gz
        draft: false
        prerelease: false

  docker-build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: create-release
    if: success()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=semver,pattern={{version}},value=${{ needs.create-release.outputs.version }}
          type=semver,pattern={{major}}.{{minor}},value=${{ needs.create-release.outputs.version }}
          type=semver,pattern={{major}},value=${{ needs.create-release.outputs.version }}
          type=raw,value=latest
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Generate image summary
      run: |
        echo "## üê≥ Docker Images Published" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "The following Docker images have been published to GitHub Container Registry:" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "```" >> $GITHUB_STEP_SUMMARY
        echo "ghcr.io/${{ github.repository }}:latest" >> $GITHUB_STEP_SUMMARY
        echo "ghcr.io/${{ github.repository }}:${{ needs.create-release.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "```" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Usage" >> $GITHUB_STEP_SUMMARY
        echo "```bash" >> $GITHUB_STEP_SUMMARY
        echo "docker pull ghcr.io/${{ github.repository }}:latest" >> $GITHUB_STEP_SUMMARY
        echo "docker run -p 3000:3000 ghcr.io/${{ github.repository }}:latest" >> $GITHUB_STEP_SUMMARY
        echo "```" >> $GITHUB_STEP_SUMMARY

  notify:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [create-release, docker-build]
    if: always()
    
    steps:
    - name: Notify success
      if: needs.create-release.result == 'success'
      run: |
        echo "‚úÖ Release ${{ needs.create-release.outputs.version }} created successfully!"
        # Aggiungi qui notifiche (Slack, Discord, email, etc.)
    
    - name: Notify failure
      if: needs.create-release.result == 'failure'
      run: |
        echo "‚ùå Release failed!"
        # Aggiungi qui notifiche di errore
